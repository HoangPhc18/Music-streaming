# Ứng dụng phát nhạc trực tuyến

Một ứng dụng web đầy đủ để phát nhạc trực tuyến, được xây dựng với Django REST Framework backend và React frontend.

## Cấu trúc dự án

```
Music-streaming/
├── api/ # Django backend
│ ├── music/ # Ứng dụng Django cho chức năng liên quan đến âm nhạc
│ ├── musicstreaming/ # Cấu hình dự án Django
│ ├── manage.py # Tập lệnh quản lý Django
│ └── venv/ # Môi trường ảo Python
├── web/ # React frontend
│ ├── public/ # Tệp tĩnh
│ ├── src/ # Mã nguồn React
│ ├── package.json # Phụ thuộc NPM
│ └── node_modules/ # Đã cài đặt Các gói Node.js
├── data.sql # Dữ liệu SQL để khởi tạo cơ sở dữ liệu
└── README # Tệp này
```

## Tính năng

- Xác thực người dùng và quản lý tài khoản
- Duyệt và tìm kiếm thư viện nhạc
- Tạo và quản lý danh sách phát
- Phát nhạc có điều khiển
- Mục yêu thích và lịch sử của người dùng
- Thiết kế đáp ứng cho máy tính để bàn và thiết bị di động

## Công nghệ Stack

### Phần cuối
- Django
- Django REST Framework
- Cơ sở dữ liệu SQLite (phát triển)
- Python 3.x

### Phần đầu
- React.js
- React Router để điều hướng
- Axios cho các yêu cầu API
- Bootstrap để tạo kiểu

## Hướng dẫn thiết lập

### Thiết lập phần cuối

1. Điều hướng đến thư mục API:
```
cd api
```

2. Kích hoạt môi trường ảo:
- Windows:
```
venv\Scripts\activate
```
- macOS/Linux:
```
source venv/bin/activate
```

3. Cài đặt các phụ thuộc (nếu cần):
```
pip install -r requirements.txt
```

4. Áp dụng di chuyển:
```
python manage.py migrate
```

5. Tải dữ liệu ban đầu (tùy chọn):
```
python manage.py loaddata data.sql
```

6. Chạy máy chủ phát triển:
```
python manage.py runserver
```

### Thiết lập giao diện người dùng

1. Điều hướng đến thư mục web:
```
cd web
```

2. Cài đặt các phụ thuộc (nếu cần):
```
npm install
```

3. Khởi động máy chủ phát triển:
```
npm start
```

## Điểm cuối API

- `/api/auth/` - Điểm cuối xác thực
- `/api/songs/` - Điểm cuối thư viện nhạc
- `/api/playlists/` - Quản lý danh sách phát
- `/api/users/` - Quản lý hồ sơ người dùng

## Phát triển

### Thêm bài hát mới

Để thêm bài hát mới vào cơ sở dữ liệu, bạn có thể:
1. Sử dụng giao diện quản trị Django
2. Thêm mục vào tệp data.sql và tải lại cơ sở dữ liệu
3. Sử dụng điểm cuối API với xác thực phù hợp

### Tạo thành phần mới

Các thành phần giao diện người dùng phải được thêm vào thư mục `web/src/components` theo các mẫu đã thiết lập.

## Triển khai

Hướng dẫn triển khai lên môi trường sản xuất sẽ được thêm vào các bản cập nhật trong tương lai.

1. Quản lý người dùng
Đăng ký: POST /api/auth/register
Đăng nhập: POST /api/auth/login
Đăng xuất: POST /api/auth/logout
Xem thông tin cá nhân: GET /api/users/profile
Cập nhật thông tin cá nhân: PUT /api/users/profile
Đổi mật khẩu: PUT /api/auth/change-password
2. Quản lý bài hát
Danh sách bài hát: GET /api/songs
Tìm kiếm bài hát: GET /api/songs/search?q={query}
Xem chi tiết bài hát: GET /api/songs/{id}
Thêm bài hát mới (admin): POST /api/songs
Cập nhật thông tin bài hát (admin): PUT /api/songs/{id}
Xóa bài hát (admin): DELETE /api/songs/{id}
3. Phát nhạc
Phát bài hát: GET /api/songs/{id}/stream
Lấy URL phát nhạc: GET /api/songs/{id}/play-url
4. Playlist
Tạo playlist mới: POST /api/playlists
Xem danh sách playlist của người dùng: GET /api/users/playlists
Xem chi tiết playlist: GET /api/playlists/{id}
Thêm bài hát vào playlist: POST /api/playlists/{id}/songs
Xóa bài hát khỏi playlist: DELETE /api/playlists/{id}/songs/{song_id}
Cập nhật thông tin playlist: PUT /api/playlists/{id}
Xóa playlist: DELETE /api/playlists/{id}
5. Nghệ sĩ và album
Danh sách nghệ sĩ: GET /api/artists
Chi tiết nghệ sĩ: GET /api/artists/{id}
Bài hát của nghệ sĩ: GET /api/artists/{id}/songs
Danh sách album: GET /api/albums
Chi tiết album: GET /api/albums/{id}
Bài hát trong album: GET /api/albums/{id}/songs
6. Thể loại nhạc
Danh sách thể loại: GET /api/genres
Bài hát theo thể loại: GET /api/genres/{id}/songs